rm(list = ls())
# Fe is fertilization efficiency
# tb is time for polyspermy block (s)
# sr is sex ratio (proportion of population that is male)
# S is sperm density per unit male density (sperm/uL/individual/m^2)
# E is egg density per unit female density (egg/uL/individual/m^2)
# tau is half life of sperm (s)
# c is cost due to infection.
# nif is density of infected females (females per m^2)
# Fertilization dynamics function
# psi is settlment constant (uL/m^2)
number_zygotes <- function(Males, sigma, v, Fe, tb, sr, S, E, tau, nif, c, psi = 1) {
# beta0=collision rate constant; estimated by egg size (sigma) and velocity(v)
S0 <- Males * S
Females <- (Males / sr) - Males
# E0<-S0*E*(Females/Males)#Egg density should be proportional to #females
E0 <- E * (Females - nif) + E * (1 - c) * nif
beta0 <- sigma * v
tau <- tau
# x=Average number of potential fertilizaing sperm
x <- Fe * (S0 / E0) * (1 - exp(-1 * (beta0 * E0 * tau)))
# b=mean number of extr fertilizing sperm that will contact an egg in a time period tb in a population of eggs already contacted
b <- Fe * (S0 / E0) * (1 - exp(-1 * (beta0 * E0 * tb)))
prop_mono <- 1 - exp(-1 * x) - ((1 - exp(-1 * x) - x * exp(-1 * x)) *
(1 - exp(-1 * b)))
return(prop_mono * E0 * psi)
}
number_zygotes(0.9,21,100,10,10,0.5,10,60,100,0.2,0.5)
# Nim is density of infected males (individuals/m^2)
# Num is density of uninfected males (individuals/m^2)
# K is adult carrying capacity (individuals/m^2)
# d is mortality rate of changee
# Ma is base adult mortality
# ml is larval mortality
# R is feminzation rate
# Feminization models
# (nuf/Females) + (1-c)*(nuf/Females)
# infected females
Dens_F_i_t1f <- function(Nz, Nif, Nuf, Nim, Num, K, d, Ma, Ml, R, c) {
Nt <- Nif + Nuf + Nim + Num
Nzif <- Nz * (R * (((1 - c) * Nif) / (Nif * (1 - c) + Nuf)))
return((Nzif * (1 - Ml) + Nif) * (1 - Ma / (1 + exp(-d * (
Nt + Nz * (1 - Ml) - K / 2
)))))
}
# uninfected females
Dens_F_u_t1f <- function(Nz, Nif, Nuf, Nim, Num, K, d, Ma, Ml, c) {
Nt <- Nif + Nuf + Nim + Num
Nzuf <- Nz * (Nuf / (Nif * (1 - c) + Nuf)) * 0.5
return((Nzuf * (1 - Ml) + Nuf) * (1 - Ma / (1 + exp(-d * (
Nt + Nz * (1 - Ml) - K / 2
)))))
}
# infected males
Dens_M_i_t1f <- function(Nz, Nif, Nuf, Nim, Num, K, d, Ma, Ml, R, c, Mk =
0) {
Nt <- Nif + Nuf + Nim + Num
Nzim <- Nz * ((1 - R) * ((Nif * (1 - c)) / (Nif * (1 - c) + Nuf))) *
(1 - Mk)
return((Nzim * (1 - Ml) + Nim) * (1 - Ma / (1 + exp(-d * (
Nt + Nz * (1 - Ml) - K / 2
)))))
}
# uninfected males
Dens_M_u_t1f <- function(Nz, Nif, Nuf, Nim, Num, K, d, Ma, Ml, c) {
Nt <- Nif + Nuf + Nim + Num
Nzmf <- Nz * (Nuf / (Nif * (1 - c) + Nuf)) * 0.5
return((Nzmf * (1 - Ml) + Num) * (1 - Ma / (1 + exp(-d * (
Nt + Nz * (1 - Ml) - K / 2
)))))
}
# * 2.c Vectorized equal function -----------------------------------------
# vectorized equal
# tol is how close doubles can be together
# taken from https://stackoverflow.com/questions/35097815/vectorized-equality-testing
is_equal_tol <- function(x, y, tol = .Machine$double.eps) {
abs(x - y) < tol
}
# 3. Run the simulation for Figure 4A (feminization)-----------------------------------------
# simulate function
# initialize things
# register number of cores for parallel computing
registerDoParallel(23)
# initalize vector of different egg sizes
eggs <- seq(40, 1500, 10)
# convert egg sizes to cross sectional area
eggs <- ((pi * (eggs / 1000)^2) / 4)
eggs2<-(((eggs* 4)/pi)^0.5)*1000
bss<-seq(200,1500,100)
mks<-seq(0,0.99,0.01)
cs<-seq(-3,0,0.1)
vs<-seq(0.05,0.4,0.01)
eggs[1]
# 4. Run the simulations for Figure 4A (male killing + enhanced gr --------
fsims <-
foreach(e = eggs[1], .combine = rbind) %:%
foreach(mk = 0.7, .combine = rbind) %:%
foreach(v = 0.06, .combine = rbind) %:%
foreach(c = -2.4, .combine = rbind) %:%
foreach(
b_ss = 200,
.combine = rbind
) %dopar% {
# no Feminization
r <- 0.5
# set flag to false, this lets us know whether population sizes of equilibriated
flags <- c(FALSE, FALSE, FALSE, FALSE)
# keep track of any numerical errors
er <- "None"
# intilize starting denisties
nt0 <- c(.1, .1,0,0)
# calculate number of eggs based on egg size. Number taken from same overal reproductive value as H. tub.
numegg <- 1.132059 / e
#egg in mm of resident
e2<-((((e* 4)/pi)^0.5)*1000)
# Egg size of lower mutant
eL<-e2-10
#numegg of lower mutant
numeggL<-1.132059 /((pi * (eL / 1000)^2) / 4)
#egg size of higher mutant
eH<-e2+10
#numegg of higher mutant
numeggH<-1.132059 /((pi * (eH / 1000)^2) / 4)
#larval mortality rate of resident
ml <-1-exp(-b_ss/e2)
#larval mortality or higher mutant
mlH<-exp(-b_ss/eH)
#larval mortality of lower mutant
mlL<-exp(-b_ss/eL)
sl<-exp(-b_ss/e2)
#sperm resident
s<-5000/v
vlH<-v+0.01
spH<-5000/vlH
vlL<-v-0.01
spL<-5000/vlL
# set generation time to time
time <- 1
# Keep going if flags have not stabilized
while (!all(flags)) {
nz <-
number_zygotes(
Males = nt0[2] + nt0[4],
sigma = e,
v = v,
Fe = 0.09444,
tb = 1,
sr = nt0[2] + nt0[4] / sum(nt0),
S = s,
E = numegg,
tau = 5400,
nif = nt0[1],
c = c
)
nt1 <-
c(
Dens_F_i_t1f(
Nz = nz,
Nif = nt0[1],
Nuf = nt0[3],
Nim = nt0[2],
Num = nt0[4],
K = 100,
d = 0.1,
Ma = 0.99,
Ml = ml,
R = r,
c = c
),
Dens_M_i_t1f(
Nz = nz,
Nif = nt0[1],
Nuf = nt0[3],
Nim = nt0[2],
Num = nt0[4],
K = 100,
d = 0.1,
Ma = 0.99,
Ml = ml,
R = r,
c = c,
Mk = mk
),
Dens_F_u_t1f(
Nz = nz,
Nif = nt0[1],
Nuf = nt0[3],
Nim = nt0[2],
Num = nt0[4],
K = 100,
d = 0.1,
Ma = 0.99,
Ml = ml,
c = c
),
Dens_M_u_t1f(
Nz = nz,
Nif = nt0[1],
Nuf = nt0[3],
Nim = nt0[2],
Num = nt0[4],
K = 100,
d = 0.1,
Ma = 0.99,
Ml = ml,
c = c
)
)
# test if there is any change
flags <- is_equal_tol(nt0, nt1, tol = .Machine$double.eps)
if (any(is.na(flags))) {
er <- "NAs"
break
}
# some simulations result in cycles
if (time > 100000) {
er <- "Exceeded Time"
break
}
nt0 <- nt1
time <- time + 1
}
dens <- sum(nt0)
sr <- (nt0[1] + nt0[3]) / dens
resW<-number_zygotes(
Males = nt0[2] + nt0[4],
sigma = e,
v = v,
Fe = 0.09444,
tb = 1,
sr = nt0[2] + nt0[4] / sum(nt0),
S = s,
E = numegg,
tau = 5400,
nif = nt0[1],
c = c
)*sl
hW<-number_zygotes(
Males = nt0[2] + nt0[4],
sigma = ((pi * (eH / 1000)^2) / 4),
v = v,
Fe = 0.09444,
tb = 1,
sr = nt0[2] + nt0[4] / sum(nt0),
S =s,
E = numegg,
tau = 5400,
nif = nt0[1],
c = c
)/numegg*numeggH*mlH
lW<-number_zygotes(
Males = nt0[2] + nt0[4],
sigma = ((pi * (eL / 1000)^2) / 4),
v = v,
Fe = 0.09444,
tb = 1,
sr = nt0[2] + nt0[4] / sum(nt0),
S = s,
E = numegg,
tau = 5400,
nif = nt0[1],
c = c
)/numegg*numeggL*mlL
resWM<-number_zygotes(
Males = nt0[2] + nt0[4],
sigma = e,
v = v,
Fe = 0.09444,
tb = 1,
sr = nt0[2] + nt0[4] / sum(nt0),
S = s,
E = numegg,
tau = 5400,
nif = nt0[1],
c = c
)/numegg*s
hWM<-number_zygotes(
Males = nt0[2] + nt0[4],
sigma = e,
v = vlH,
Fe = 0.09444,
tb = 1,
sr = nt0[2] + nt0[4] / sum(nt0),
S =s,
E = numegg,
tau = 5400,
nif = nt0[1],
c = c
)/numegg*spH
lWM<-number_zygotes(
Males = nt0[2] + nt0[4],
sigma = e,
v = vlL,
Fe = 0.09444,
tb = 1,
sr = nt0[2] + nt0[4] / sum(nt0),
S = s,
E = numegg,
tau = 5400,
nif = nt0[1],
c = c
)/numegg*spL
if (any(is.na(c(lW,resW,hW)))) {
er <- "NAs"
dir<-NA
}else if(lW >resW &hW > resW){
dir<-"Either"
}else if(lW>resW){
dir<-"Smaller"
}else if(hW>resW){
dir<-"Larger"
}else{
dir<-"Stable"
}
if (any(is.na(c(lWM,resWM,hWM)))) {
er <- "NAs"
dirM<-NA
}else if(lWM>resWM &hWM > resWM){
dirM<-"Either"
}else if(lWM>resWM){
dirM<-"Smaller"
}else if(hWM>resWM){
dirM<-"Larger"
}else{
dirM<-"Stable"
}
result <-
data.frame(
DIRF=dir,
RESWF=resW,
LWF=lW,
HWF=hW,
DIRM=dirM,
RESWM=resWM,
LWM=lWM,
HWM=hWM,
Egg_Size = e,
Egg_Size2=e2,
Larval_m = ml,
Egg_number = numegg,
Feminization = r,
Time = time,
Density = dens,
Sex_ratio = sr,
Error = er,
nif0 = nt0[1],
nim0 = nt0[2],
cost = c,
MK = mk,
b =b_ss
)
return(result)
}
result
fsims
0.5^2
0.25*10
0.25*100
va=10
ve=20
vp=ve+va
vp
h=va/vp
va=5
ve=20
vp=ve+va
h=va/vp
va=1
ve=20
vp=ve+va
h=va/vp
shiny::runApp('Desktop/MyPapers/CFC/Dryad/SI_Web_App')
runApp('Desktop/MyPapers/CFC/Dryad/SI_Web_App')
runApp('Desktop/MyPapers/CFC/Dryad/SI_Web_App')
runApp('Desktop/MyPapers/CFC/Dryad/SI_Web_App')
runApp('Desktop/MyPapers/CFC/Dryad/SI_Web_App')
setwd("~/Desktop/MyPapers/CFC/Dryad/SI_Web_App")
# * 1.b Loading up and processing data ------------------------------------
run_data <- readRDS("data/run_data_shiny_shorter.rds") %>%
mutate(
A = factor(A, levels = c("50.0","12.5","1.0")),
Var = factor(Var, levels = c("LV", "MV", "HV")),
PopSize = factor(PopSize, levels = c("1000", "10000"))
)
run_data$Level <- factor(run_data$Level)
summary(run_data)
View(run_data)
gens<-c(1,seq(0,30000,400))
gens
gens<-c(1,seq(400,30000,400))
# * 1.b Loading up and processing data ------------------------------------
run_data <- readRDS("data/run_data_shiny_shorter.rds") %>%
mutate(
A = factor(A, levels = c("50.0","12.5","1.0")),
Var = factor(Var, levels = c("LV", "MV", "HV")),
PopSize = factor(PopSize, levels = c("1000", "10000"))
)%>%
filter(Generation%in%gens)
saveRDS(run_data,"data/run_data_shiny_shorter.rds")
runApp()
shiny::runApp()
runApp()
library(parallel)
library(data.table)
library(ggh4x)
library(viridis)
#R script to make all the main figures and SI figures 4-7
# 1. Loading up libraries -------------------------------------------------
library(tidyverse)
library(patchwork)
library(furrr)
library(parallel)
library(data.table)
library(ggh4x)
library(viridis)
library(forcats)
library(RColorBrewer)
library(wesanderson)
# 2. Default plotting themes/labels ---------------------------------------
mytheme <-
theme_bw() + theme(
legend.position = "bottom",
#this puts legend on the bottom
axis.title = (element_text(color = "black")),
#Makes the axis line black and  thicker
text = element_text(size = 16),
axis.text = element_text(color = "black"),
panel.grid = element_blank(),
strip.background = element_rect(fill = "white", size = 1)
)
theme_set(mytheme)
##Labels
#vector of labels for strength of selection
A.labs<-c("Weak Selection","Moderate Selection","Strong Selection")
#name the vector to match actual values in data frame
names(A.labs)<-c("50.0","12.5","1.0")
#vector of labels for sex traits
Sex.labs<-c("Cryptic choice trait","Sperm trait")
#name the vector to match actual values in data frame
names(Sex.labs)<-c("Female","Male")
#vector of labels for variation
Var.labs <- c("Small Var", "Medium Var", "Large Var")
#name the vector to match actual values in data frame
names(Var.labs) <- c("LV", "MV", "HV")
#vector of labels for tradeoff
T.labs <- c("NA", "No Tradeoff", "Tradeoff")
#name the vector to match actual values in data frame
names(T.labs) <- c("-1", "false", "true")
#vector of labels for number of loci
L.labs <- c("2 Loci", "20 Loci")
#name the vector to match actual values in data frame
names(L.labs) <- c("2", "20")
#vector of labels for population size
P.labs <- c("N = 1000", "N = 10000")
#name the vector to match actual values in data frame
names(P.labs) <- c("1000", "10000")
#Make color palette
pal <- rev(plasma(8)[c(1, 3, 5, 7)])
#Reading in last_2000 generation summary for all runs
runs_rawSumLast<-readRDS("Data/All_sum_Last2000.rds")
setwd("~/Desktop/MyPapers/CFC/Dryad/Analysis")
#Reading in last_2000 generation summary for all runs
runs_rawSumLast<-readRDS("Data/All_sum_Last2000.rds")
str(runs_rawSumLast)
# 11. SI Figure 6. Sensitivity of gamma estimates -------------------------------------------------------------
runs_rawSumLast %>%
group_by(Level, A, Tradeoff, PopSize, Var, Loci) %>%
summarise(
GMale_medians = median(GMale_median))%>%
mutate(Var=factor(Var,levels=c("LV","MV","HV")))%>%
ggplot(aes(x = Level, y = A, fill = GMale_medians)) +
geom_tile(color = "black", size = 0.5) +
facet_nested(
Tradeoff + PopSize ~ Var + Loci,
labeller = labeller(
Tradeoff = T.labs,
Var = Var.labs,
Loci = L.labs,
PopSize = P.labs
)
) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = "right", aspect.ratio = 1) +
scale_y_discrete(labels = c("Weak", "Moderate", "Strong"),
expand = c(0, 0)) +
scale_x_discrete(expand = c(0, 0)) +
scale_fill_gradient2(
low = "#E66100",
mid="white",
high="#5D3A9B",
#limits = ,c(-0.01, .2),
guide = guide_colorbar(
frame.colour = "black",
frame.linewidth = 2,
ticks.linewidth = 2,
ticks.colour = "black",
title.position = "top",
title.hjust = 0.5,
barwidth = 18
)
) +
labs(y = "Strength of selection on sperm trait\n", x = "Risk of sperm competition", fill =
"Gamma sperm trait") +
theme(legend.position = "top")
#Save figure
ggsave(
"SIFigure6.png",
height = 200,
width = 180 * 2,
units = "mm"
)
runApp('~/Desktop/MyPapers/CFC/Dryad/SI_Web_App')
50*50
shiny::runApp()
